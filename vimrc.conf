" make all of the things work!
set nocompatible

" -[ colour and theming ] {{{
  set t_Co=256                   " enable 256 colour mode on systems that need this set

  " an awesome colour scheme by Todd Werth: http://blog.toddwerth.com/entries/8
  colorscheme ir_black
  "colorscheme hemisu

  "let g:zenburn_high_Contrast=1
  "colors zenburn
  "set background=dark
" }}}

call pathogen#infect()         " Pathogen, baby!
call pathogen#helptags()       " TagHightlight

set nocompatible               " compatibility mode with traditional (and inferior) vi is for crazy people!
set encoding=utf-8
set autoread                   " reload files that have changed from the outside

" -[ terminal settings ] {{{
  set ttyfast
  set lazyredraw
" }}}

syntax on                      " turn on syntax colouring for various languages

" turn off spellcheck
" setlocal spell!

autocmd FileChangedShell *
	\ echohl WarningMsg |
	\ echo "File has been changed outside of vim." |
	\ echohl None

" Load NERDtree if no files specified
autocmd vimenter * if !argc() | NERDTree | endif

"-[ Indents and tabs ] {{{
  set tabstop=2                  " four is the best number ever (especially when combined with 2)
  set shiftwidth=2               " spaces for each step of (auto)indent
  "set autoindent                " maintain the current indentation when going to a new line
  set expandtab                  " expand tabs. tabs rip.
  set shiftround                 " always round indents to multiples of shiftindent
  set copyindent                 " use existing indents for new indents (?)
  set preserveindent             " save as much indent structure as possible
  filetype plugin indent on      " load filetype plugins and indent settings (haml needs spaces, for example)
  set backspace=2                " Backspace deletes like most programs in insert mode

  set formatoptions=qrn1
  "set colorcolumn=+1
" }}}

" -[ Markdown stuff ] {{{
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  " Enable spellchecking for Markdown
  autocmd BufRead,BufNewFile *.md setlocal spell

  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80
" }}}

" -[ Force file formats ] {{{
  " Make .hamlc templates use the haml formatter
  au BufRead,BufNewFile *.hamlc set ft=haml
  au BufRead,BufNewFile *.scss set ft=scss
  au BufRead,BufNewFile *.plist set ft=xml
" }}}

" Ensure regular line numbers when we lose focus, like when running a test
:au FocusLost * :set number
:au FocusGained * :set relativenumber

" Ensure regular line numbers in insert mode
autocmd InsertEnter * :set number
autocmd InsertLeave * :set relativenumber

"--------------- Console UI and text display
set laststatus=2               " always show the statusline
set title                      " sets the title of the terminal window
set ruler                      " a nice ruler
set number                     " line numbers? yes, please
set cul                        " hightlight the current line
set incsearch                  " live searching ftw!
set relativenumber             " relative line numbers

"-------------- Short-cut keys, etc.
" - make window smaller, + make window bigger, ` next window
"map - <C-W>-
"map + <C-W>+
map ` <C-W>w
map ~ <C-W>p
"nmap <silent> \ :NERDTreeToggle<CR>
let mapleader = ","
nmap <Leader>, :NERDTreeToggle<cr>
nmap <Leader>bb :BufExplorer<cr>
nnoremap <F1> :set invnumber number?<cr>:set invrelativenumber relativenumber?<cr>
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode
nnoremap <F4> :close<cr>
nnoremap <leader>ev :split $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Swap between relative and regular line numbers
nnoremap <F5> :call NumberToggle()<cr>

" Copy and paste to and from the OS X clipboard
vmap <Leader>c y:call system("pbcopy", getreg("\""))<CR>
nmap <Leader>v :call setreg("\"",system("pbpaste"))<CR>p
map <C-n> :bn<cr>
map <C-p> :bp<cr>
nmap <Leader>j :%!python -m json.tool<cr>

"-------------- NERDtree
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1

"-------------- Disabled, example, and experimental stuff

" set term=ansi

"source $HOME/Documents/dot-files/vim/ir_black.vim
" set t_Co=256
"function StripTrailingWhitespace()
"	:%s/\s\+$//
"	echo "Trailing white space stripped."
"endfunction

"command Stripwp :call StripTrailingWhitespace()
nnoremap n nzzzv:call PulseCursorLine()<cr>
nnoremap N Nzzzv:call PulseCursorLine()<cr>

function! PulseCursorLine()
    let current_window = winnr()

    windo set nocursorline
    execute current_window . 'wincmd w'

    setlocal cursorline

    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    hi CursorLine guibg=#2a2a2a ctermbg=233
    redraw
    sleep 40m

    hi CursorLine guibg=#333333 ctermbg=235
    redraw
    sleep 40m

    hi CursorLine guibg=#3a3a3a ctermbg=237
    redraw
    sleep 40m

    hi CursorLine guibg=#444444 ctermbg=239
    redraw
    sleep 40m

    hi CursorLine guibg=#3a3a3a ctermbg=237
    redraw
    sleep 40m

    hi CursorLine guibg=#333333 ctermbg=235
    redraw
    sleep 40m

    hi CursorLine guibg=#2a2a2a ctermbg=233
    redraw
    sleep 40m

    execute 'hi ' . old_hi

    windo set cursorline
    execute current_window . 'wincmd w'
endfunction

function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

set list listchars=tab:\ \ ,trail:Â·

